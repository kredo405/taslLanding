import { Avatar, Divider, List, Skeleton, Dropdown, Space, Button, Drawer, theme } from 'antd';
import { DownOutlined, SmileOutlined } from '@ant-design/icons';
import { useEffect, useState } from 'react';
import InfiniteScroll from 'react-infinite-scroll-component';

const Content = () => {
    const [loading, setLoading] = useState(false);
    const [description, setDescription] = useState('');
    const [data, setData] = useState([
        {
            task: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–°—Ç—É–¥–µ–Ω—Ç",',
            description: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–°—Ç—É–¥–µ–Ω—Ç", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª—è "–∏–º—è", "–≤–æ–∑—Ä–∞—Å—Ç" –∏ "—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª". –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª).'
        },
        {
            task: '–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞",',
            description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Scanner.'
        },
        {
            task: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"',
            description: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª—è "—à–∏—Ä–∏–Ω–∞" –∏ "–≤—ã—Å–æ—Ç–∞". –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞..'
        },
        {
            task: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ —Å—É–º–º—ã',
            description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∏—Ö —Å—É–º–º—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Scanner –∏ —Ü–∏–∫–ª while.'
        },
        {
            task: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"',
            description: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ). –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –∑–Ω–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω.'
        },
        {
            task: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤',
            description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–±–∏–≤–∞–µ—Ç –µ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω.'
        },
        {
            task: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ú–∞—Å—Å–∏–≤"',
            description: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–ú–∞—Å—Å–∏–≤", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–µ "–º–∞—Å—Å–∏–≤" –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ —Ç.–¥.). –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã, —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏ —Ç.–¥.'
        },
        {
            task: '–Ø–≤–ª—è–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–¥—Ä–æ–º–æ–º',
            description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—Ç.–µ. —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ) –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        },
        {
            task: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–°—á–µ—Ç—á–∏–∫"',
            description: '–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å "–°—á–µ—Ç—á–∏–∫", —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–µ "–∑–Ω–∞—á–µ–Ω–∏–µ" –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ "–°—á–µ—Ç—á–∏–∫", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω.'
        },
    ]);

    const { token } = theme.useToken();
    const [open, setOpen] = useState(false);
    const showDrawer = () => {
        setOpen(true);
    };
    const onClose = () => {
        setOpen(false);
    };

    const containerStyle = {
        position: 'relative',
        height: 200,
        padding: 48,
        overflow: 'hidden',
        textAlign: 'center',
        background: token.colorFillAlter,
        border: `1px solid ${token.colorBorderSecondary}`,
        borderRadius: token.borderRadiusLG,
    };

    const items = [
        {
            key: '1',
            label: (
                <span target="_blank" rel="noopener noreferrer" >
                    –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                </span>
            ),
        },
        {
            key: '2',
            label: (
                <span target="_blank" rel="noopener noreferrer">
                    –ü–æ –í–æ–∑–≤—Ä–∞—Å—Ç–∞–Ω–∏—é
                </span>
            ),
        },
        {
            key: '3',
            label: (
                <span target="_blank" rel="noopener noreferrer">
                    –ü–æ –£–±—ã–≤–∞–Ω–∏—é
                </span>
            ),
        },
    ];

    // const loadMoreData = () => {
    //     if (loading) {
    //         return;
    //     }
    //     setLoading(true);
    //     fetch('https://randomuser.me/api/?results=10&inc=name,gender,email,nat,picture&noinfo')
    //         .then((res) => res.json())
    //         .then((body) => {
    //             setData([...data, ...body.results]);
    //             setLoading(false);
    //         })
    //         .catch(() => {
    //             setLoading(false);
    //         });
    // };
    // useEffect(() => {
    //     loadMoreData();
    // }, []);

    return (
        <div className='flex justify-between z-0'>
            <div className='w-full lg:w-6/12'>
                <div className='py-3 px-3 w-full flex justify-end'>
                    <Dropdown
                        menu={{
                            items,
                        }}
                    >
                        <a onClick={(e) => e.preventDefault()}>
                            <Space>
                                –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                                <DownOutlined />
                            </Space>
                        </a>
                    </Dropdown>
                </div>
                <div
                    id="scrollableDiv"
                    style={{
                        height: 500,
                        overflow: 'auto',
                        padding: '0 16px',
                        border: '1px solid rgba(140, 140, 140, 0.35)',
                    }}
                >
                    {/* <InfiniteScroll
                        dataLength={data.length}
                        next={loadMoreData}
                        hasMore={data.length < 50}
                        loader={
                            <Skeleton
                                avatar
                                paragraph={{
                                    rows: 1,
                                }}
                                active
                            />
                        }
                        endMessage={<Divider plain>It is all, nothing more ü§ê</Divider>}
                        scrollableTarget="scrollableDiv"
                    > */}
                    <List
                        dataSource={data}
                        renderItem={(item) => (
                            <List.Item
                                key={item.task}
                                onClick={() => { setDescription(item.description); showDrawer(); }} className='font-sans text-lg font-normal'
                            >
                                <p className='cursor-pointer'>{item.task}</p>
                            </List.Item>
                        )}
                    />
                    {/* </InfiniteScroll> */}
                </div>
            </div>
            <div className='w-6/12 mt-10 hidden lg:block'>
                <h2 className='text-center font-bold text-3xl'>–û–ø–∏—Å–∞–Ω–∏–µ</h2>
                <div className='p-5'>
                    {description}
                </div>
                <div>
                </div>
            </div>
            <div className='block lg:hidden'>
                    <Drawer
                        title="–û–ø–∏—Å–∞–Ω–∏–µ"
                        placement="right"
                        closable={false}
                        onClose={onClose}
                        open={open}
                        getContainer={false}
                    >
                        <p>{description}</p>
                    </Drawer>
                </div>
        </div>
    )
}

export default Content;